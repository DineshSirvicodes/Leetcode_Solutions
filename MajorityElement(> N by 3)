// Time Complexity - O(n) for normal cases or 0(n)*log(n) other cases
//Space Complexity - 0(n)
// Better Solution
class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        vector<int> ls;
        map<int,int> mpp;
        int n = nums.size();
        int mini = (int)(n/3) + 1;
        for(int i = 0 ; i<n ; i++){
            mpp[nums[i]]++;
            if(mpp[nums[i]] == mini){
                ls.push_back(nums[i]);
            }
            if(ls.size()==2) break;
        }
        sort(ls.begin(),ls.end());
        return ls;
    }
  };

  // Best Solution
  // Using Moore's Voting Algorithm
  class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int cnt1 = 0, cnt2 = 0;
        int el1 = INT_MIN;
        int el2 = INT_MIN;
        int n = nums.size();
        for(int i = 0; i<n ; i++){
            if(cnt1 == 0 && nums[i]!=el2){
                cnt1 = 1;
                el1 = nums[i];
            }
            else if(cnt2 == 0 &&  nums[i]!=el1){
                cnt2 = 1;
                el2 = nums[i];
            }
            else if(el1 == nums[i]) cnt1++;
            else if(el2 == nums[i]) cnt2++;
            else{
                cnt1--, cnt2--;
            }
        }
        //manual check whether the el1 and el2 
        //we got are major or not
        vector<int> ls;
        cnt1 = 0, cnt2 = 0;
        for(int i = 0; i<n ; i++){
            if(el1 == nums[i]) cnt1++;
            if(el2 == nums[i]) cnt2++;
        }
        int mini = (int)(n/3) + 1;
        if(cnt1>=mini) ls.push_back(el1);
        if(cnt2>=mini) ls.push_back(el2);
        sort(ls.begin(),ls.end());
        return ls;

    }
};
